import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Path to timing log generated by your recipe evaluation runs
CSV_PATH     = "../../results/recipe/timing.log"
# Paths where to save the visualizations
HEATMAP_OUT  = "../../scores/recipe/recipe_inference_latency_heatmap.png"
BAR_OUT      = "../../scores/recipe/recipe_average_inference_time.png"

# map file‐internal model keys → display names
alias_map = {
    "deepseek_r1_8b":  "deepseek-r1:8b",
    "llama3_1":        "llama3.1:8b",
    "granite_code_8b": "granite-code:8b",
}

# order in which to display the recipe benchmarks
benchmarks_order = [
    "reaching_definitions",
    "very_busy_expressions",
    "available_expressions",
    "live_variable_analysis",
    "interval_analysis",
    "type_state_analysis",
    "taint_analysis",
    "concurrency_analysis",
]

# Load timing data
df = pd.read_csv(CSV_PATH)

# Pivot so each row is a benchmark, each column a model
pivot = df.pivot(index="benchmark", columns="model", values="seconds")
pivot = pivot.reindex(benchmarks_order)
pivot = pivot.rename(columns=alias_map)

# Compute average inference time per model
avg_times = pivot.mean(axis=0)

# --- Heatmap of log10 times ---
plt.figure(figsize=(10, 8))
log_data = np.log10(pivot.values)
im = plt.imshow(log_data, aspect="auto")

models      = pivot.columns.tolist()
bench_labels = [b.replace("_", " ").title() for b in pivot.index]

plt.xticks(np.arange(len(models)), models, rotation=45, ha="right")
plt.yticks(np.arange(len(bench_labels)), bench_labels)
plt.title("Inference Latency Heatmap (Recipes)", pad=20)

# Annotate each cell with the raw seconds
mean_log = log_data.mean()
for i in range(len(bench_labels)):
    for j in range(len(models)):
        val = pivot.iloc[i, j]
        color = "white" if log_data[i, j] > mean_log else "black"
        plt.text(j, i, f"{val:.0f}s",
                 ha="center", va="center",
                 color=color, fontsize=9, fontweight="bold")

plt.colorbar(label="log₁₀(Time [s] for 100 prompts)")
os.makedirs(os.path.dirname(HEATMAP_OUT), exist_ok=True)
plt.tight_layout()
plt.savefig(HEATMAP_OUT, dpi=300)
plt.close()

# --- Bar chart of average times ---
plt.figure(figsize=(8, 6))
plt.bar(avg_times.index, avg_times)
plt.yscale("log")
plt.xticks(rotation=45, ha="right")
plt.ylabel("Average Time [s] (log scale)")
plt.title("Average Inference Time per Model (100 prompts)")

# Annotate bar values
for i, t in enumerate(avg_times):
    plt.text(i, t * 1.05, f"{t:.1f}s",
             ha="center", va="bottom", fontsize=9, fontweight="bold")

os.makedirs(os.path.dirname(BAR_OUT), exist_ok=True)
plt.tight_layout()
plt.savefig(BAR_OUT, dpi=300)
plt.show()
